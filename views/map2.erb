<!DOCTYPE html>
<meta charset="utf-8">
<style>

.counties {
  fill: none;
}

.states {
  fill: none;
  stroke: #000;
  stroke-linejoin: round;
}

#tooltip {
  position:absolute;
  z-index: 10;
  visibility: hidden;
  background-color: white;
  font-size: 98%;
  padding: 1px;
  box-shadow: 0px 0px 0px #000;
  border: 0px solid grey;
}

.q0-9 { fill:rgb(247,251,255); }
.q1-9 { fill:rgb(222,235,247); }
.q2-9 { fill:rgb(198,219,239); }
.q3-9 { fill:rgb(158,202,225); }
.q4-9 { fill:rgb(107,174,214); }
.q5-9 { fill:rgb(66,146,198); }
.q6-9 { fill:rgb(33,113,181); }
.q7-9 { fill:rgb(8,81,156); }
.q8-9 { fill:rgb(8,48,107); }

</style>
<body>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="http://d3js.org/queue.v1.min.js"></script>
<script src="http://d3js.org/topojson.v1.min.js"></script>
<script>

var tooltip;

var width = 960,
    height = 600;

var rateById = d3.map();

var quantize = d3.scale.quantize()
    .domain([0, .15])
    .range(d3.range(9).map(function(i) { return "q" + i + "-9"; }));

var projection = d3.geo.albersUsa()
    // .scale(1280)
    .scale(760)
    .translate([width / 2, height / 2]);

var path = d3.geo.path()
    .projection(projection);

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

tooltip = d3.select("body")
    .append("div")
    .attr("id","tooltip");

queue()
    .defer(d3.json, "us.json")
    // .defer(d3.tsv, "temp.tsv", function(d) { 
    //   rateById.set(d.id, +d.rate); //map.set(key, value)
    // })
    .defer(d3.tsv, "unemployment.tsv", function(d) { 
      rateById.set(d.id, +d.rate); //map.set(key, value)
    })
    .await(ready);

function ready(error, us) {

  svg.append("g")
      .attr("class", "counties")
    .selectAll("path")
      .data(topojson.feature(us, us.objects.counties).features)
      // .data(topojson.feature(us, us.objects.states).features)
    .enter().append("path")
      .attr("class", function(d) { return quantize(rateById.get(d.id)); })
      .attr("d", path)
    // for tooltip
    .on("mouseover", function(d){
      tooltip.text("Id: " + d.id + ", Rate: " + rateById.get(d.id) );
      d3.select(this).style('stroke-width','2px');
      d3.select(this).style('stroke','red');
      tooltip.style("visibility", "visible");
    })
    .on("mousemove", function(){
      tooltip.style("top", (event.pageY-10)+"px").style("left",(event.pageX+10)+"px");})
    .on("mouseout", function(){
      d3.select(this).style('stroke-width','.25px');
      d3.select(this).style('stroke','grey');
      tooltip.style("visibility", "hidden");});

  // svg.append("path")
  //     .datum(topojson.mesh(us, us.objects.states, function(a, b) { return a !== b; }))
  //     .attr("class", "states")
  //     .attr("d", path);
}

// d3.select(self.frameElement).style("height", height + "px");
</script>

